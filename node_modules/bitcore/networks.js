var Put = require('bufferput');
var buffertools = require('buffertools');
var imports     = require('soop').imports();
var util        = imports.util || require('./util/util');
var Bignum      = imports.Bignum || require('bignum');

var hex = function(hex) {return new Buffer(hex, 'hex');};

// BITCOIN
exports.livenet = {
  name: 'livenet',
  addressVersion: 0x00,
  magic: hex('f9beb4d9'),
  protocolVersion: 70000,
  subversion: '/BitcoinX:0.1/',
  maxMoney: 21000000 * util.COIN,
  getBlockValue: function(height) {
    var subsidy = Bignum(50).mul(util.COIN);
    subsidy = subsidy.div(Bignum(2).pow(Math.floor(height / 210000)));
    return subsidy;
  },
  hashes: {
    message: ['sha256', 'sha256'],
    tx: ['sha256', 'sha256'],
    proofOfWork: ['sha256', 'sha256'],
    addrHash: ['sha256', 'ripemd160'],
    addrChecksum: ['sha256', 'sha256'],
  },
  genesisBlock: {
    height: 0,
    nonce: 2083236893,
    version: 1,
    hash: hex('6FE28C0AB6F1B372C1A6A246AE63F74F931E8365E15A089C68D6190000000000'),
    prev_hash: buffertools.fill(new Buffer(32), 0),
    timestamp: 1231006505,
    merkle_root: hex('3BA3EDFD7A7B12B27AC72C3E67768F617FC81BC3888A51323A9FB8AA4B1E5E4A'),
    bits: 486604799
  },
  genesisBlockTx: {
    outs: [{
      v: hex('00F2052A01000000'), // 50 BTC (5000000000)
      s: new Put()
        .word8(65) // 65 bytes of data follow
        .put(hex('04678AFDB0FE5548271967F1A67130B7105CD6A828E03909A67962E0EA1F61DEB649F6BC3F4CEF38C4F35504E51EC112DE5C384DF7BA0B8D578A4C702B6BF11D5F'))
        .word8(0xAC) // OP_CHECKSIG
        .buffer()
    }],
    lock_time: 0,
    version: 1,
    hash: hex('3BA3EDFD7A7B12B27AC72C3E67768F617FC81BC3888A51323A9FB8AA4B1E5E4A'),
    ins: [{
      q: 0xFFFFFFFF,
      o: hex("0000000000000000000000000000000000000000000000000000000000000000FFFFFFFF"),
      s: new Put()
        .put(hex('04FFFF001D010445'))
        .put(new Buffer('The Times 03/Jan/2009 Chancellor on brink of ' +
                        'second bailout for banks', 'ascii'))
        .buffer()
    }]
  },
  proofOfWorkLimit: hex("00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"),
  checkpoints: [], // need to put checkpoint blocks here
  addressPubkey: 0,
  addressScript: 5,
  keySecret: 128,
};

exports.testnet = {
  name: 'testnet',
  addressVersion: 0x6f,
  magic: hex('0b110907'),
  protocolVersion: module.exports.livenet.protocolVersion,
  subversion: module.exports.livenet.subversion,
  maxMoney: module.exports.livenet.maxMoney,
  getBlockValue: module.exports.livenet.getBlockValue,
  hashes: module.exports.livenet.hashes,
  genesisBlock: {
    height: 0,
    nonce: 414098458,
    version: 1,
    hash: hex('43497FD7F826957108F4A30FD9CEC3AEBA79972084E90EAD01EA330900000000'),
    prev_hash: buffertools.fill(new Buffer(32), 0),
    timestamp: 1296688602,
    merkle_root: hex('3BA3EDFD7A7B12B27AC72C3E67768F617FC81BC3888A51323A9FB8AA4B1E5E4A'),
    bits: 486604799,
  },
  genesisBlockTx: module.exports.livenet.genesisBlockTx,
  proofOfWorkLimit: module.exports.livenet.proofOfWorkLimit,
  checkpoints: [], // need to put checkput blocks here
  addressPubkey: 111,
  addressScript: 196,
  keySecret: 239,
};

// MAXCOIN
exports.maxcoin = {
  name: 'maxcoin',
  addressVersion: 110,
  magic: hex('f9bebbd2'),
  protocolVersion: 70001,
  subversion: '/Max:0.9.0/',
  maxMoney: 106058400 * util.COIN,
  getBlockValue: function(height) {
    if (height == 0) return Bignum(5).mul(util.COIN);;
    if (height <= 140000) return Bignum(96).mul(util.COIN);
    var subsidy = Bignum(48).mul(util.COIN);
    subsidy = subsidy.div(Bignum(2).pow(Math.floor(height / 1051200)));
    if (subsidy < Bignum(1).mul(util.COIN)) subsidy = Bignum(1).mul(util.COIN);
    if (height >= 6307200) subsidy = Bignum(0);
    return subsidy;
  },
  hashes: {
    message: ['sha3'],
    tx: ['sha256'],
    proofOfWork: ['sha3'],
    addrHash: ['sha256', 'ripemd160'],
    addrChecksum: ['sha3'],
  },
  genesisBlock: {
    hash: hex('6419A2AC8A32C9A3FA2D6977E06F9073EE4310353A7A736E8A55860F2D000000'),
    version: 112,
    prev_hash: buffertools.fill(new Buffer(32), 0),
    merkle_root: hex('F36AE45560247C5C7FE195E47128AF943405CC987DDC18C388A473C2463BCCF8'),
    timestamp: 1390822264,
    bits: 503382015, // 0x1e00ffff
    nonce: 11548217,
    height: 0,
  },
  genesisBlockTx: {
    lock_time: 0,
    version: 1,
    hash: hex('F36AE45560247C5C7FE195E47128AF943405CC987DDC18C388A473C2463BCCF8'), // Merkle Root
    /*
        txNew.vout[0].nValue = nGenesisBlockRewardCoin;
        txNew.vout[0].scriptPubKey = CScript() << ParseHex("04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f") << OP_CHECKSIG;
    */
    outs: [{ 
      v: hex('0065CD1D00000000'), // 5 MAX (500000000)
      s: new Put() // SCRIPT
        .word8(65) // 65 bytes of data follow
        .put(hex('736B6E616220726F662074756F6C69616220646E6F63657320666F206B6E697262206E6F20726F6C6C65636E61684320393030322F6E614A2F33302073656D6954206568544504011D00FFFF04'))
        .word8(0xAC) // OP_CHECKSIG
        .buffer()
    }],
    /*
      txNew.vin[0].scriptSig = CScript() << 486604799 << CBigNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));

    txNew.vin[0].scriptSig = 486604799 4 0x736B6E616220726F662074756F6C69616220646E6F63657320666F206B6E697262206E6F20726F6C6C65636E61684320393030322F6E614A2F33302073656D695420656854

    486604799 is 0x1D00FFFF
    */
    ins: [{
      q: 0xFFFFFFFF,
      o: hex("0000000000000000000000000000000000000000000000000000000000000000FFFFFFFF"),
      //q: 0x1D00FFFF,
      //o: hex("00000000000000000000000000000000000000000000000000000000000000001D00FFFF"),
      s: new Put() // SIGNATURE
        .put(hex('FFFF001D'))
        .word8(4)
        .put(hex('5468652054696D65732030332F4A616E2F32303039204368616E63656C6C6F72206F6E206272696E6B206F66207365636F6E64206261696C6F757420666F722062616E6B73')) // pszTimestamp
        .buffer()
    }],
  },
  proofOfWorkLimit: module.exports.livenet.proofOfWorkLimit,
  checkpoints: [],
  addressPubkey: 110,
  addressScript: 112,
  keySecret: 128,
};
