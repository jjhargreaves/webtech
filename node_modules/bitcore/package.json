{
  "name": "bitcore",
  "description": "Bitcoin Library",
  "version": "0.1.8",
  "author": {
    "name": "Stephen Pair",
    "email": "stephen@bitpay.com"
  },
  "contributors": [
    {
      "name": "Stefan Thomas",
      "email": "moon@justmoon.net"
    },
    {
      "name": "Jeff Garzik",
      "email": "jgarzik@bitpay.com"
    },
    {
      "name": "Manuel Araoz",
      "email": "manuelaraoz@gmail.com"
    },
    {
      "name": "Matias Alejo Garcia",
      "email": "ematiu@gmail.com"
    },
    {
      "name": "Ryan X. Charles",
      "email": "ryan@bitpay.com"
    }
  ],
  "keywords": [
    "bitcoin",
    "btc",
    "satoshi",
    "money",
    "currency",
    "virtual"
  ],
  "main": "bitcore.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/bitpay/bitcore.git"
  },
  "scripts": {
    "test": "mocha test -R spec",
    "postinstall": "node browser/build.js -a",
    "install": "node-gyp rebuild"
  },
  "dependencies": {
    "soop": "=0.1.5",
    "base58-native": "=0.1.3",
    "bindings": "=1.1.1",
    "bufferput": "git://github.com/bitpay/node-bufferput.git",
    "bignum": "=0.6.2",
    "binary": "=0.3.0",
    "step": "=0.0.4",
    "buffers": "=0.1.1",
    "buffertools": "~2.0.1",
    "browserify": "~3.32.1",
    "browser-pack": "~2.0.1",
    "commander": "~2.1.0",
    "browserify-bignum": "git://github.com/maraoz/browserify-bignum.git",
    "browserify-buffertools": "~1.0.2",
    "brfs": "~1.0.0",
    "uglifyify": "~1.2.3"
  },
  "devDependencies": {
    "grunt-contrib-watch": "~0.5.3",
    "grunt-mocha-test": "~0.8.2",
    "grunt-shell": "~0.6.4",
    "grunt-browserify": "~2.0.0",
    "grunt-markdown": "~0.5.0",
    "mocha": ">=1.15.1",
    "chai": "~1.9.0",
    "brfs": "~1.0.0",
    "async": "~0.2.10",
    "commander": "~2.1.0",
    "browser-pack": "~2.0.1"
  },
  "license": "MIT",
  "gypfile": true,
  "readme": "Bitcore\n=======\n\nA pure, powerful core for your bitcoin project.\n\nBitcore is a complete, native interface to the Bitcoin network, and provides the core functionality needed to develop apps for bitcoin.\n\n#Principles\nBitcoin is a powerful new peer-to-peer platform for the next generation of financial technology. The decentralized nature of the Bitcoin network allows for highly resilient bitcoin infrastructure, and the developer community needs reliable, open-source tools to implement bitcoin apps and services.\n\n**Bitcore unchains developers from fallible, centralized APIs, and provides the tools to interact with the real Bitcoin network.**\n\n#Get Started\n\nBitcore runs on [node](http://nodejs.org/), and can be installed via [npm](https://npmjs.org/):\n```\nnpm install bitcore\n```\n\nIt is a collection of objects useful to bitcoin applications; class-like idioms are enabled via [Soop](https://github.com/gasteve/soop). In most cases, a developer will require the object's class directly. For instance:\n```\nvar bitcore = require('bitcore');\nvar Address = bitcore.Address;\nvar Transaction = bitcore.Transaction;\nvar PeerManager = bitcore.PeerManager;\n```\n\n#Examples\n\nSome examples are provided at the [examples](/examples) path. Here are some snippets:\n\n## Validating an address\nValidating a Bitcoin address:\n```js\nvar bitcore = require('bitcore');\nvar Address = bitcore.Address;\n\nvar addrs = [\n  '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n  '1A1zP1eP5QGefi2DMPTfTL5SLmv7Dixxxx',\n  'A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n  '1600 Pennsylvania Ave NW',\n].map(function(addr) {\n  return new Address(addr);\n});\n\naddrs.forEach(function(addr) {\n  var valid = addr.isValid();\n  console.log(addr.data + ' is ' + (valid ? '' : 'not ') + 'valid');\n});\n```\n## Monitoring Blocks and Transactions\nFor this example you need a running bitcoind instance with RPC enabled. \n```js\nvar bitcore = require('bitcore');\nvar networks = bitcore.networks;\nvar Peer = bitcore.Peer;\nvar PeerManager = require('soop').load('../PeerManager', {\n  network: networks.testnet\n});\n\nvar handleBlock = function(info) {\n  console.log('** Block Received **');\n  console.log(info.message);\n};\n\nvar handleTx = function(info) {\n  var tx = info.message.tx.getStandardizedObject();\n\n  console.log('** TX Received **');\n  console.log(tx);\n};\n\nvar handleInv = function(info) {\n  console.log('** Inv **');\n  console.log(info.message);\n\n  var invs = info.message.invs;\n  info.conn.sendGetData(invs);\n};\n\nvar peerman = new PeerManager();\n\npeerman.addPeer(new Peer('127.0.0.1', 18333));\n\npeerman.on('connection', function(conn) {\n  conn.on('inv', handleInv);\n  conn.on('block', handleBlock);\n  conn.on('tx', handleTx);\n});\n\npeerman.start();\n```\n\nPeerManager will emit the following events: 'version', 'verack', 'addr', 'getaddr', 'error' 'disconnect'; and will relay events like: 'tx', 'block', 'inv'. Please see  [PeerManager.js](PeerManager.js), [Peer.js](Peer.js) and [Connection.js](Connection.js)\n\n\n## Consuming bitcoind RPC\nFor this example you need a running bitcoind instance with RPC enabled. \n```js\nvar bitcore = require('bitcore');\nvar RpcClient = bitcore.RpcClient;\nvar hash = '0000000000b6288775bbd326bedf324ca8717a15191da58391535408205aada4';\n\nvar config = {\n  protocol: 'http',\n  user: 'user',\n  pass: 'pass',\n  host: '127.0.0.1',\n  port: '18332',\n};\n\nvar rpc = new RpcClient(config);\n\nrpc.getBlock(hash, function(err, ret) {\n  if (err) {\n    console.error('An error occured fetching block', hash);\n    console.error(err);\n    return;\n  }\n  console.log(ret);\n});\n```\nCheck the list of all supported RPC call at [RpcClient.js](RpcClient.js)\n\n## Creating and sending a Transaction through P2P\nFor this example you need a running bitcoind instance with RPC enabled. \n```js\nvar bitcore = require('bitcore');\nvar networks = bitcore.networks;\nvar Peer = bitcore.Peer;\nvar Transaction = bitcore.Transaction;\nvar Address = bitcore.Address;\nvar Script = bitcore.Script;\nvar coinUtil = bitcore.util;\nvar PeerManager = require('soop').load('../PeerManager', {\n  network: networks.testnet\n});\n\nvar createTx = function() {\n  var TXIN = 'd05f35e0bbc495f6dcab03e599c8f5e32a07cdb4bc76964de201d06a2a7d8265';\n  var TXIN_N = 0;\n  var ADDR = 'muHct3YZ9Nd5Pq7uLYYhXRAxeW4EnpcaLz';\n  var VAL = '0.001';\n\n  var txobj = {\n    version: 1,\n    lock_time: 0,\n    ins: [],\n    outs: []\n  };\n\n  var txin = {\n    s: coinUtil.EMPTY_BUFFER, // Add signature\n    q: 0xffffffff\n  };\n\n  var hash = new Buffer(TXIN.split('').reverse(), 'hex');\n  var vout = parseInt(TXIN_N);\n  var voutBuf = new Buffer(4);\n\n  voutBuf.writeUInt32LE(vout, 0);\n  txin.o = Buffer.concat([hash, voutBuf]);\n  txobj.ins.push(txin);\n\n  var addr = new Address(ADDR);\n  var script = Script.createPubKeyHashOut(addr.payload());\n  var valueNum = coinUtil.parseValue(VAL);\n  var value = coinUtil.bigIntToValue(valueNum);\n\n  var txout = {\n    v: value,\n    s: script.getBuffer(),\n  };\n  txobj.outs.push(txout);\n\n  return new Transaction(txobj);\n\n};\n\nvar peerman = new PeerManager();\npeerman.addPeer(new Peer('127.0.0.1', 18333));\n\npeerman.on('connect', function() {\n  var conn = peerman.getActiveConnection();\n  if (conn) {\n    conn.sendTx(createTx());\n  }\n  conn.on('reject', function() {\n    console.log('Transaction Rejected');\n  });\n});\n\npeerman.start();\n```\n\n\n## Parsing a Script \n\nGets an address strings from a ScriptPubKey Buffer\n\n```js\nvar bitcore = require('bitcore');\nvar Address = bitcore.Address;\nvar coinUtil = bitcore.util;\nvar Script = bitcore.Script;\nvar network = bitcore.networks.testnet;\n\nvar getAddrStr = function(s) {\n  var addrStrs = [];\n  var type = s.classify();\n  var addr;\n\n  switch (type) {\n    case Script.TX_PUBKEY:\n      var chunk = s.captureOne();\n      addr = new Address(network.addressPubkey, coinUtil.sha256ripe160(chunk));\n      addrStrs.push(addr.toString());\n      break;\n    case Script.TX_PUBKEYHASH:\n      addr = new Address(network.addressPubkey, s.captureOne());\n      addrStrs.push(addr.toString());\n      break;\n    case Script.TX_SCRIPTHASH:\n      addr = new Address(network.addressScript, s.captureOne());\n      addrStrs.push(addr.toString());\n      break;\n    case Script.TX_MULTISIG:\n      var chunks = s.capture();\n      chunks.forEach(function(chunk) {\n        var a = new Address(network.addressPubkey, coinUtil.sha256ripe160(chunk));\n        addrStrs.push(a.toString());\n      });\n      break;\n    case Script.TX_UNKNOWN:\n      console.log('tx type unkown');\n      break;\n  }\n  return addrStrs;\n};\n\nvar script = 'DUP HASH160 0x14 0x3744841e13b90b4aca16fe793a7f88da3a23cc71 EQUALVERIFY CHECKSIG';\nvar s = Script.fromHumanReadable(script);\nconsole.log(getAddrStr(s)[0]); // mkZBYBiq6DNoQEKakpMJegyDbw2YiNQnHT\n```\n\n#Security\nPlease use at your own risk.\n\nBitcore is still under heavy development and not quite ready for \"drop-in\" production use. If you find a security issue, please email security@bitcore.io.\n\n#Contributing\nBitcore needs some developer love. Please send pull requests for bug fixes, code optimization, and ideas for improvement.\n\n#Browser support\n## Building the browser bundle\nTo build bitcore full bundle for the browser:\n(this is automatically executed after you run `npm install`)\n\n```\nnode browser/build.js -a\n```\nThis will generate a `browser/bundle.js` file which you can include\nin your HTML to use bitcore in the browser.\n\n## \n\n##Example browser usage\n\nFrom example/simple.html\n```\n<!DOCTYPE html>\n<html>\n  <body>\n    <script src=\"../browser/bundle.js\"></script>\n    <script>\n      var bitcore = require('bitcore');\n      var Address = bitcore.Address;\n      var a = new Address('1KerhGhLn3SYBEQwby7VyVMWf16fXQUj5d');\n      console.log('1KerhGhLn3SYBEQwby7VyVMWf16fXQUj5d is valid? '+a.isValid());\n    </script>\n  </body>\n</html>\n```\n\nYou can check a more complex usage example at examples/example.html\n\n## Generating a customized browser bundle\nTo generate a customized bitcore bundle, you can specify \nwhich submodules you want to include in it with the -s option:\n\n```\nnode browser/build.js -s Transaction,Address\n```\nThis will generate a `browser/bundle.js` containing only the Transaction\n and Address class, with all their dependencies. \nUse this option if you are not using the whole bitcore library, to optimize\nthe bundle size, script loading time, and general resource usage.\n\n\n#License\n\n**Code released under [the MIT license](https://github.com/bitpay/bitcore/blob/master/LICENSE).**\n\nCopyright 2013-2014 BitPay, Inc. Bitcore is a trademark maintained by BitPay, Inc.\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/bitpay/bitcore/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bitpay/bitcore/issues"
  },
  "homepage": "https://github.com/bitpay/bitcore",
  "_id": "bitcore@0.1.8",
  "_from": "bitcore@"
}
